🌍 Terraform Basics
Terraform is an open-source IaC (Infrastructure as Code) tool created by HashiCorp.

It uses a declarative language (HashiCorp Configuration Language, HCL) to define and provision infrastructure.

📁 File Structure
main.tf – Core infrastructure configuration.

variables.tf – Variable definitions.

outputs.tf – Output values after applying configuration.

terraform.tfvars – Actual values for variables.

🔧 Basic Commands
Command	Description
terraform init	Initializes the working directory
terraform plan	Shows changes before applying
terraform apply	Applies changes to infrastructure
terraform destroy	Destroys managed infrastructure
terraform validate	Validates the configuration files
terraform fmt	Formats configuration files
terraform output	Displays outputs from state

🧱 HCL Syntax Overview
hcl
Copy
Edit
provider "aws" {
  region = "us-east-1"
}

resource "aws_instance" "web" {
  ami           = "ami-0abc1234"
  instance_type = "t2.micro"
}
📦 Providers & Resources
Providers: Interface to cloud platforms (AWS, Azure, GCP, etc.)

Resources: Objects (EC2 instance, VPC, etc.) to manage with Terraform

hcl
Copy
Edit
provider "google" {
  credentials = file("account.json")
  project     = "my-project-id"
  region      = "us-central1"
}
📥 Variables
Declaring a variable:
hcl
Copy
Edit
variable "instance_type" {
  type    = string
  default = "t2.micro"
}
Using a variable:
hcl
Copy
Edit
instance_type = var.instance_type
📤 Outputs
hcl
Copy
Edit
output "instance_ip" {
  value = aws_instance.web.public_ip
}
🔐 State Management
Terraform tracks infrastructure in a state file: terraform.tfstate

Don't manually edit it

Use remote state (e.g., S3 with DynamoDB locking) for team collaboration

🧩 Modules
Modules are reusable configurations

hcl
Copy
Edit
module "vpc" {
  source = "./modules/vpc"
  cidr_block = "10.0.0.0/16"
}
🚨 Best Practices
Use version control (e.g., Git) for .tf files

Use remote state backends for collaboration

Lock provider versions

Use workspaces for multiple environments (dev/staging/prod)

Store secrets in a secure tool (e.g., Vault, AWS Secrets Manager)

⚙️ Getting Started
1. Initialize the project
bash
Copy
Edit
terraform init
2. Preview changes
bash
Copy
Edit
terraform plan
3. Apply changes
bash
Copy
Edit
terraform apply
4. Destroy infrastructure
bash
Copy
Edit
terraform destroy
🧩 Configuration Example
h
Copy
Edit
provider "aws" {
  region = "us-east-1"
}

resource "aws_instance" "example" {
  ami           = "ami-0c55b159cbfafe1f0"
  instance_type = "t2.micro"
}
📥 Variables
variables.tf:

hcl
Copy
Edit
variable "instance_type" {
  type    = string
  default = "t2.micro"
}
terraform.tfvars:

hcl
Copy
Edit
instance_type = "t3.small"
📤 Outputs
h
Copy
Edit
output "instance_ip" {
  value = aws_instance.example.public_ip
}
📦 Modules
Modules allow code reuse.

hcl
Copy
Edit
module "vpc" {
  source     = "./modules/vpc"
  cidr_block = "10.0.0.0/16"
}
🔐 Remote State (Optional)
To collaborate across teams:

hcl
Copy
Edit
terraform {
  backend "s3" {
    bucket         = "my-terraform-state"
    key            = "global/s3/terraform.tfstate"
    region         = "us-east-1"
    dynamodb_table = "terraform-locks"
    encrypt        = true
  }
}
✅ Best Practices
Use .tfvars for sensitive or environment-specific data.

Exclude secrets and terraform.tfstate from version control:

Copy
Edit
.terraform/
terraform.tfstate*
*.tfvars
Enable state locking with a backend like S3 + DynamoDB (for AWS).

Use workspaces for managing multiple environments.

🧰 Useful Commands
Command	Purpose
terraform init	Initialize project
terraform plan	Show execution plan
terraform apply	Apply infrastructure changes
terraform destroy	Destroy infrastructure
terraform fmt	Format Terraform files
terraform validate	Validate syntax
terraform output	Show output values
terraform workspace	Manage environments

