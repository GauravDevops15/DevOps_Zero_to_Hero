🧰 Jenkins Notes
📌 What is Jenkins?
Jenkins is an open-source automation server used for:
Continuous Integration (CI): Automatically building and testing code after every change.
Continuous Delivery/Deployment (CD): Automatically deploying applications after successful builds/tests.

🛠️ Key Concepts
Term	Description
Job/Project	A task like building/testing/deploying code.
Build	An execution of a job.
Node/Agent	A machine where Jenkins runs jobs.
Master/Controller	Main Jenkins server that schedules jobs.
Pipeline	Scripted steps defining CI/CD flow (via Jenkinsfile).
SCM (Source Control Management)	Git, GitHub, GitLab, Bitbucket, etc.
Plugins	Extend Jenkins with features (e.g., Docker, GitHub integration).

🔧 Installing Jenkins
Manual (WAR): Download .war from jenkins.io and run:
nginx
Copy
Edit
java -jar jenkins.war
Package Manager: apt (Debian/Ubuntu) or yum (RHEL/CentOS)

Docker:

bash
Copy
Edit
docker run -p 8080:8080 -p 50000:50000 jenkins/jenkins:lts
🧩 Must-Have Plugins
Git

GitHub

Pipeline

Blue Ocean (UI for pipelines)

Credentials Binding

Docker / Docker Pipeline

Email Extension

🧪 Job Types
Freestyle Project
UI-based configuration
Good for simple tasks
Pipeline
Script-based (Jenkinsfile)
Ideal for version-controlled, complex CI/CD

🧾 Sample Jenkinsfile
groovy
Copy
Edit
pipeline {
    agent any
    stages {
        stage('Checkout') {
            steps {
                git 'https://github.com/user/repo.git'
            }
        }
        stage('Build') {
            steps {
                sh 'make build'
            }
        }
        stage('Test') {
            steps {
                sh 'make test'
            }
        }
        stage('Deploy') {
            steps {
                sh './deploy.sh'
            }
        }
    }
}


🔐 Credentials Management
Go to Manage Jenkins → Credentials
Add secrets (e.g., GitHub tokens, SSH keys, passwords)
Use with withCredentials {} block in pipelines


🛎️ Triggers
Poll SCM: Jenkins checks repo for changes
Webhook: GitHub notifies Jenkins (preferred)
Build periodically: Cron-style schedule
Manual: Start job on demand

💡 Tips
Use parameterized builds for flexibility
Archive artifacts (archiveArtifacts) to store build outputs
Use post blocks for cleanup or notifications
Keep Jenkins updated and back it up regularly
Split jobs into stages for clarity and parallelism
